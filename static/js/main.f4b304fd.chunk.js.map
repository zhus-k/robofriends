{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","components/Header.js","containers/App.js","actions.js","reducers.js","index.js"],"names":["Card","name","email","id","phone","website","className","src","alt","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","Header","nextProps","nextState","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","err","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4b304fd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id, phone, website }) => {\r\n    return (\r\n        <div className='bg-light-yellow br1 pa3 ma2 grow bw2 shadow-5 tc card'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"\" />\r\n            <div className='br1 shadow-1 infobox overlay'>\r\n                <h2 className='text nameplate'>{ name }</h2>\r\n                <p className='text m'>{ email }</p>\r\n                <p className='text m'>{ phone }</p>\r\n                <p className='text m'>{ website }</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div className='grid-container'>\r\n            { \r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                        key={ i }\r\n                        id={ robots[i].id }\r\n                        name={ robots[i].name }\r\n                        email={ robots[i].email }\r\n                        phone={ robots[i].phone }\r\n                        website={ robots[i].website }\r\n                        />\r\n                    );\r\n                })\r\n             }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className='pa2 searchbox'>\r\n            <input\r\n                aria-label='Search Robots'\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={ searchChange }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className='scrollbox'>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops. An Error has occured.</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render () {\r\n        return <h1 className='blanka4 white'>RoboFriends</h1>\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\nimport 'tachyons';\r\nimport { requestRobots, setSearchField } from '../actions';\r\nimport Header from '../components/Header';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        return isPending ?\r\n            <h1 className='tc'>Loading...</h1>\r\n            :\r\n            (\r\n                <div className='tc'>\r\n                    <Header />\r\n                    <div className='divider'></div>\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text,\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n    dispatch({\r\n        type: REQUEST_ROBOTS_PENDING\r\n    });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: data\r\n    }))\r\n    .catch(err => dispatch({\r\n        type: REQUEST_ROBOTS_FAILED,\r\n        payload: err\r\n    }));\r\n}","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = ( state = initialStateSearch, action = {} ) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload } );\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: '',\r\n}\r\n\r\nexport const requestRobots = ( state = initialStateRobots, action = {} ) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './containers/App';\r\n\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nimport './index.css';\r\nimport 'tachyons';\r\n\r\nlet middleware = [];\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  const logger = createLogger();\r\n  middleware = [...middleware, logger];\r\n}\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, ...middleware));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}