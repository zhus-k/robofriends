{"version":3,"sources":["constants.js","actions.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","components/ErrorBoundary.js","components/MainPage.js","containers/App.js","reducers.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobotsPending","type","requestRobotsSuccess","data","payload","requestRobotsFailed","err","Card","name","email","id","phone","website","className","src","alt","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","placeholder","onChange","Scroll","props","children","Header","nextProps","nextState","Component","ErrorBoundary","state","hasError","error","info","this","setState","MainPage","filteredRobots","filter","robot","toLowerCase","includes","searchField","onRequestRobots","onSearchChange","isPending","App","connect","searchRobots","requestRobots","dispatch","event","text","target","value","a","fetch","response","json","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.82a98d7e.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nexport const setSearchField = text => (\r\n    {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text,\r\n    }\r\n);\r\n\r\nexport const requestRobots = () => async dispatch => {\r\n    dispatch(requestRobotsPending());\r\n\r\n    try {\r\n        const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n        const data = await response.json();\r\n        dispatch(requestRobotsSuccess(data));\r\n    } catch (err) {\r\n        dispatch(requestRobotsFailed(err));\r\n    }\r\n}\r\n\r\nexport const requestRobotsPending = () => {\r\n    return {\r\n        type: REQUEST_ROBOTS_PENDING\r\n    }\r\n}\r\n\r\nexport const requestRobotsSuccess = (data) => {\r\n    return {\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const requestRobotsFailed = (err) => {\r\n    return {\r\n        type: REQUEST_ROBOTS_FAILED,\r\n        payload: err\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Card = ({ name, email, id, phone, website }) => {\r\n    return (\r\n        <div className='bg-light-yellow br1 pa3 ma2 grow bw2 shadow-5 tc card'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"\" />\r\n            <div className='br1 shadow-1 infobox overlay'>\r\n                <h2 className='text nameplate'>{ name }</h2>\r\n                <p className='text m'>{ email }</p>\r\n                <p className='text m'>{ phone }</p>\r\n                <p className='text m'>{ website }</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div className='grid-container'>\r\n            { \r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                        key={ i }\r\n                        id={ robots[i].id }\r\n                        name={ robots[i].name }\r\n                        email={ robots[i].email }\r\n                        phone={ robots[i].phone }\r\n                        website={ robots[i].website }\r\n                        />\r\n                    );\r\n                })\r\n             }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className='pa2 searchbox'>\r\n            <input\r\n                aria-label='Search Robots'\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={ searchChange }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className='scrollbox'>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render () {\r\n        return <h1 className='blanka4 white'>RoboFriends</h1>\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops. An Error has occured.</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport '../containers/App.css';\r\nimport 'tachyons';\r\n\r\nclass MainPage extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    filteredRobots = () => {\r\n        return this.props.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {onSearchChange, isPending } = this.props;\r\n\r\n        return isPending ?\r\n            <h1 className='tc'>Loading...</h1>\r\n            :\r\n            (\r\n                <div className='tc'>\r\n                    <Header />\r\n                    <div className='divider'></div>\r\n                    <SearchBox searchChange={ onSearchChange } />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={ this.filteredRobots() } />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    };\r\n};\r\n\r\nexport default MainPage;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { requestRobots, setSearchField } from '../actions';\r\n\r\nimport MainPage from '../components/MainPage';\r\n\r\nimport 'tachyons';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return <MainPage {...this.props} />;\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = ( state = initialStateSearch, action = {} ) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload } );\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: '',\r\n}\r\n\r\nexport const requestRobots = ( state = initialStateRobots, action = {} ) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './containers/App';\r\n\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nimport './index.css';\r\nimport 'tachyons';\r\n\r\nlet middleware = [];\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  const logger = createLogger();\r\n  middleware = [...middleware, logger];\r\n}\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, ...middleware));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}