{"version":3,"sources":["constants.js","actions.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","components/ErrorBoundary.js","components/MainPage.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobotsPending","type","requestRobotsSuccess","data","payload","requestRobotsFailed","err","Card","name","email","id","phone","website","className","src","alt","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","placeholder","onChange","Scroll","props","children","Header","nextProps","nextState","Component","ErrorBoundary","state","hasError","error","info","this","setState","MainPage","filteredRobots","filter","robot","toLowerCase","includes","searchField","onRequestRobots","onSearchChange","isPending","App","connect","searchRobots","requestRobots","dispatch","event","text","target","value","a","fetch","response","json","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e4fc5f1e.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nexport const setSearchField = text => (\r\n    {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text,\r\n    }\r\n);\r\n\r\nexport const requestRobots = () => async dispatch => {\r\n    dispatch(requestRobotsPending());\r\n\r\n    try {\r\n        const response = await fetch('https://jsonplaceholder.typicode.com/users');\r\n        const data = await response.json();\r\n        dispatch(requestRobotsSuccess(data));\r\n    } catch (err) {\r\n        dispatch(requestRobotsFailed(err));\r\n    }\r\n}\r\n\r\nexport const requestRobotsPending = () => {\r\n    return {\r\n        type: REQUEST_ROBOTS_PENDING\r\n    }\r\n}\r\n\r\nexport const requestRobotsSuccess = (data) => {\r\n    return {\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: data\r\n    }\r\n}\r\n\r\nexport const requestRobotsFailed = (err) => {\r\n    return {\r\n        type: REQUEST_ROBOTS_FAILED,\r\n        payload: err\r\n    }\r\n}","import React from 'react';\r\n\r\nconst Card = ({ name, email, id, phone, website }) => {\r\n    return (\r\n        <div className='bg-light-yellow br1 pa3 ma2 grow bw2 shadow-5 tc card'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt=\"\" />\r\n            <div className='br1 shadow-1 infobox overlay'>\r\n                <h2 className='text nameplate'>{ name }</h2>\r\n                <p className='text m'>{ email }</p>\r\n                <p className='text m'>{ phone }</p>\r\n                <p className='text m'>{ website }</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div className='grid-container'>\r\n            { \r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                        key={ i }\r\n                        id={ robots[i].id }\r\n                        name={ robots[i].name }\r\n                        email={ robots[i].email }\r\n                        phone={ robots[i].phone }\r\n                        website={ robots[i].website }\r\n                        />\r\n                    );\r\n                })\r\n             }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className='pa2 searchbox'>\r\n            <input\r\n                aria-label='Search Robots'\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={ searchChange }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className='scrollbox'>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render () {\r\n        return <h1 className='blanka4 white'>RoboFriends</h1>\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Oops. An Error has occured.</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport '../containers/App.css';\r\nimport 'tachyons';\r\n\r\nclass MainPage extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    filteredRobots = () => {\r\n        return this.props.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const {onSearchChange, isPending } = this.props;\r\n\r\n        return isPending ?\r\n            <h1 className='tc'>Loading...</h1>\r\n            :\r\n            (\r\n                <div className='tc'>\r\n                    <Header />\r\n                    <div className='divider'></div>\r\n                    <SearchBox searchChange={ onSearchChange } />\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={ this.filteredRobots() } />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n    };\r\n};\r\n\r\nexport default MainPage;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { requestRobots, setSearchField } from '../actions';\r\n\r\nimport MainPage from '../components/MainPage';\r\n\r\nimport 'tachyons';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return <MainPage {...this.props} />;\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = ( state = initialStateSearch, action = {} ) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload } );\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: '',\r\n}\r\n\r\nexport const requestRobots = ( state = initialStateRobots, action = {} ) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './containers/App';\r\nimport { register as registerServiceWorker} from './serviceWorker';\r\n\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nimport './index.css';\r\nimport 'tachyons';\r\n\r\nlet middleware = [];\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  const logger = createLogger();\r\n  middleware = [...middleware, logger];\r\n}\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, ...middleware));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\nregisterServiceWorker();"],"sourceRoot":""}