{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","reducers.js","index.js"],"names":["Card","name","email","id","phone","website","className","src","alt","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","err","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a30df9d2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id, phone, website }) => {\r\n    return (\r\n        <div className='bg-light-yellow br3 pa3 ma2 grow bw2 shadow-5 tc card'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt=\"\" />\r\n            <div className='br2 shadow-1 infobox overlay'>\r\n                <h2 className='text nameplate'>{ name }</h2>\r\n                <p className='text'>{ email }</p>\r\n                <p className='text'>{ phone }</p>\r\n                <p className='text'>{ website }</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    return (\r\n        <div className='grid-container'>\r\n            { \r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                        key={ i }\r\n                        id={ robots[i].id }\r\n                        name={ robots[i].name }\r\n                        email={ robots[i].email }\r\n                        phone={ robots[i].phone }\r\n                        website={ robots[i].website }\r\n                        />\r\n                    );\r\n                })\r\n             }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={ searchChange }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className='scrollbox' style={{overflowY: 'scroll'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\n class ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state =\r\n        {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render () {\r\n        if (this.state.hasError)\r\n        {\r\n            return <h1>Oops. An Error has occured.</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n\r\n }\r\n\r\n export default ErrorBoundary;\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\nimport 'tachyons';\r\nimport { requestRobots, setSearchField } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n    \r\n        const filteredRobots = robots.filter( robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        return isPending ?\r\n            <h1 className='tc'>Loading...</h1>\r\n        :\r\n            (\r\n            <div className='tc'>\r\n                <h1 className='blanka4 white'>RoboFriends</h1>\r\n                <div className='divider'></div>\r\n                <SearchBox searchChange={ onSearchChange }/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={ filteredRobots }/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n            );\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text,\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n    dispatch({\r\n        type: REQUEST_ROBOTS_PENDING\r\n    });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: data\r\n    }))\r\n    .catch(err => dispatch({\r\n        type: REQUEST_ROBOTS_FAILED,\r\n        payload: err\r\n    }));\r\n}","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n    searchField: '',\r\n}\r\n\r\nexport const searchRobots = ( state = initialStateSearch, action = {} ) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload } );\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: '',\r\n}\r\n\r\nexport const requestRobots = ( state = initialStateRobots, action = {} ) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false })\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'; \r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport 'tachyons';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nlet middleware = [];\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  const logger = createLogger();\r\n  middleware = [...middleware, logger];\r\n}\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, ...middleware));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}